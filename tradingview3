from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import pandas as pd
from datetime import datetime

# Set up Selenium WebDriver for Microsoft Edge
edge_options = Options()
edge_options.add_argument("--start-maximized")  # Start browser maximized for visibility

# Path to your downloaded Microsoft Edge WebDriver
edge_driver_path = "C:\\Users\\RST\\Downloads\\edgedriver_win64\\msedgedriver.exe"
service = Service(edge_driver_path)
driver = webdriver.Edge(service=service, options=edge_options)

# Function to validate date input
def validate_date(date_text):
    try:
        return datetime.strptime(date_text, "%Y-%m-%d")
    except ValueError:
        print("Incorrect date format, should be YYYY-MM-DD")
        return None

# Function to choose 5-minute interval in TradingView
def select_timeframe(driver, wait):
    # Click the interval dropdown
    interval_button = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="header-toolbar-intervals"]/button/div/div')))
    interval_button.click()
    time.sleep(5)

    # Wait for dropdown to open and click on the 5-minute interval
    five_min_interval = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="overlap-manager-root"]/div[2]/span/div[1]/div/div/div/div[21]/div')))
    five_min_interval.click()
    time.sleep(60)

# Main function to scrape data
def scrape_tradingview_data(start_date, end_date, timeframe):
    # Open TradingView and log in (automate login if needed)
    driver.get("https://www.tradingview.com/chart/")
    wait = WebDriverWait(driver, 60)
    time.sleep(5)  # Wait for the page to load

    # Navigate to a specific symbol's chart (replace with your desired symbol's TradingView URL)
    symbol_url = "https://www.tradingview.com/chart/?symbol=NSE:BANKNIFTY"  # Example for Nifty
    driver.get(symbol_url)
    time.sleep(10)  # Wait for the chart to load

    # Select the 5-minute timeframe
    select_timeframe(driver, wait)

    # Example: Scrape data based on the chart's data (you will need to customize this part)
    # For now, I'm using dummy data to demonstrate the process
    data = {
        'Date': [],  # Replace with actual scraped dates
        'Open': [],  # Replace with actual scraped open prices
        'High': [],  # Replace with actual scraped high prices
        'Low': [],  # Replace with actual scraped low prices
        'Close': [],  # Replace with actual scraped close prices
    }
    
    # Convert to DataFrame for filtering
    df = pd.DataFrame(data)
    
    # Convert 'Date' column to datetime for easy filtering
    df['Date'] = pd.to_datetime(df['Date'])
    
    # Filter data based on start and end dates
    filtered_df = df[(df['Date'] >= pd.to_datetime(start_date)) & (df['Date'] <= pd.to_datetime(end_date))]

    # Print the filtered data for the selected timeframe
    print(f"\nData for timeframe: {timeframe}")
    print(filtered_df)

    # Close the browser once done
    driver.quit()

    return filtered_df

# Main program
def main():
    # Input the desired start and end date, and timeframe
    while True:
        start_date = "2024-08-01"
        if validate_date(start_date):
            break
    while True:
        end_date = "2024-09-13"
        if validate_date(end_date):
            break
    
    # Simulating timeframes like "5 minutes", "1 hour", etc. (this would impact how you scrape the data)
    timeframe = "5 minutes"  # You can adjust this for different timeframes

    # Call the function to scrape the data
    data = scrape_tradingview_data(start_date, end_date, timeframe)
    
    # Ask if the user wants to save the data to a CSV file
    save_to_csv = input("\nDo you want to save the data to a CSV file? (yes/no): ")
    if save_to_csv.lower() == 'yes':
        filename = f'tradingview_data_{start_date}_to_{end_date}.csv'
        data.to_csv(filename, index=False)
        print(f"Data saved to {filename}")

# Execute the main program
if __name__ == "__main__":
    main()
